/* 
 * convertapi
 *
 * Convert API lets you effortlessly convert file formats and types.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Cloudmersive.APIClient.NET.DocumentAndDataConvert.Client;
using Cloudmersive.APIClient.NET.DocumentAndDataConvert.Api;
using Cloudmersive.APIClient.NET.DocumentAndDataConvert.Model;

namespace Cloudmersive.APIClient.NET.DocumentAndDataConvert.Test
{
    /// <summary>
    ///  Class for testing EditHtmlApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class EditHtmlApiTests
    {
        private EditHtmlApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new EditHtmlApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of EditHtmlApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' EditHtmlApi
            //Assert.IsInstanceOfType(typeof(EditHtmlApi), instance, "instance is a EditHtmlApi");
        }

        
        /// <summary>
        /// Test EditHtmlHtmlAppendHeaderTag
        /// </summary>
        [Test]
        public void EditHtmlHtmlAppendHeaderTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string htmlTag = null;
            //System.IO.Stream inputFile = null;
            //string inputFileUrl = null;
            //var response = instance.EditHtmlHtmlAppendHeaderTag(htmlTag, inputFile, inputFileUrl);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test EditHtmlHtmlAppendHeading
        /// </summary>
        [Test]
        public void EditHtmlHtmlAppendHeadingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string headingText = null;
            //System.IO.Stream inputFile = null;
            //string inputFileUrl = null;
            //int? headingSize = null;
            //string cssStyle = null;
            //var response = instance.EditHtmlHtmlAppendHeading(headingText, inputFile, inputFileUrl, headingSize, cssStyle);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test EditHtmlHtmlAppendImageFromUrl
        /// </summary>
        [Test]
        public void EditHtmlHtmlAppendImageFromUrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string imageUrl = null;
            //System.IO.Stream inputFile = null;
            //string inputFileUrl = null;
            //string cssStyle = null;
            //var response = instance.EditHtmlHtmlAppendImageFromUrl(imageUrl, inputFile, inputFileUrl, cssStyle);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test EditHtmlHtmlAppendImageInline
        /// </summary>
        [Test]
        public void EditHtmlHtmlAppendImageInlineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //string inputFileUrl = null;
            //System.IO.Stream imageFile = null;
            //string imageUrl = null;
            //string cssStyle = null;
            //string imageExtension = null;
            //var response = instance.EditHtmlHtmlAppendImageInline(inputFile, inputFileUrl, imageFile, imageUrl, cssStyle, imageExtension);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test EditHtmlHtmlAppendParagraph
        /// </summary>
        [Test]
        public void EditHtmlHtmlAppendParagraphTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string paragraphText = null;
            //System.IO.Stream inputFile = null;
            //string inputFileUrl = null;
            //string cssStyle = null;
            //var response = instance.EditHtmlHtmlAppendParagraph(paragraphText, inputFile, inputFileUrl, cssStyle);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test EditHtmlHtmlCreateBlankDocument
        /// </summary>
        [Test]
        public void EditHtmlHtmlCreateBlankDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string title = null;
            //string cssUrl = null;
            //string cssInline = null;
            //string javascriptUrl = null;
            //string javascriptInline = null;
            //var response = instance.EditHtmlHtmlCreateBlankDocument(title, cssUrl, cssInline, javascriptUrl, javascriptInline);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test EditHtmlHtmlGetLanguage
        /// </summary>
        [Test]
        public void EditHtmlHtmlGetLanguageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //string inputFileUrl = null;
            //var response = instance.EditHtmlHtmlGetLanguage(inputFile, inputFileUrl);
            //Assert.IsInstanceOf<HtmlGetLanguageResult> (response, "response is HtmlGetLanguageResult");
        }
        
        /// <summary>
        /// Test EditHtmlHtmlGetLinks
        /// </summary>
        [Test]
        public void EditHtmlHtmlGetLinksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //string inputFileUrl = null;
            //string baseUrl = null;
            //var response = instance.EditHtmlHtmlGetLinks(inputFile, inputFileUrl, baseUrl);
            //Assert.IsInstanceOf<HtmlGetLinksResponse> (response, "response is HtmlGetLinksResponse");
        }
        
        /// <summary>
        /// Test EditHtmlHtmlGetRelCanonical
        /// </summary>
        [Test]
        public void EditHtmlHtmlGetRelCanonicalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //string inputFileUrl = null;
            //var response = instance.EditHtmlHtmlGetRelCanonical(inputFile, inputFileUrl);
            //Assert.IsInstanceOf<HtmlGetRelCanonicalUrlResult> (response, "response is HtmlGetRelCanonicalUrlResult");
        }
        
        /// <summary>
        /// Test EditHtmlHtmlGetSitemap
        /// </summary>
        [Test]
        public void EditHtmlHtmlGetSitemapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream inputFile = null;
            //string inputFileUrl = null;
            //var response = instance.EditHtmlHtmlGetSitemap(inputFile, inputFileUrl);
            //Assert.IsInstanceOf<HtmlGetSitemapUrlResult> (response, "response is HtmlGetSitemapUrlResult");
        }
        
        /// <summary>
        /// Test EditHtmlHtmlSetLanguage
        /// </summary>
        [Test]
        public void EditHtmlHtmlSetLanguageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string languageCode = null;
            //System.IO.Stream inputFile = null;
            //string inputFileUrl = null;
            //var response = instance.EditHtmlHtmlSetLanguage(languageCode, inputFile, inputFileUrl);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test EditHtmlHtmlSetRelCanonical
        /// </summary>
        [Test]
        public void EditHtmlHtmlSetRelCanonicalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string canonicalUrl = null;
            //System.IO.Stream inputFile = null;
            //string inputFileUrl = null;
            //var response = instance.EditHtmlHtmlSetRelCanonical(canonicalUrl, inputFile, inputFileUrl);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test EditHtmlHtmlSetSitemapUrl
        /// </summary>
        [Test]
        public void EditHtmlHtmlSetSitemapUrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sitemapUrl = null;
            //System.IO.Stream inputFile = null;
            //string inputFileUrl = null;
            //var response = instance.EditHtmlHtmlSetSitemapUrl(sitemapUrl, inputFile, inputFileUrl);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
    }

}
